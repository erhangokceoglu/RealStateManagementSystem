// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealStateManagementSystem.Infastructure.Data;

#nullable disable

namespace RealStateManagementSystem.Infastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230512065916_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Etimesgut",
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2465),
                            Email = "erhangokceoglu@hotmail.com",
                            IsActive = true,
                            Name = "Erhan",
                            Password = "Ankara1.",
                            PasswordHash = new byte[] { 66, 245, 190, 89, 110, 158, 209, 46, 21, 82, 210, 3, 39, 59, 122, 254, 187, 44, 233, 99, 245, 34, 35, 233, 141, 167, 125, 191, 148, 151, 58, 203 },
                            PasswordSalt = new byte[] { 189, 179, 177, 178, 241, 195, 156, 129, 226, 214, 170, 175, 191, 27, 112, 163, 103, 205, 239, 6, 67, 78, 72, 48, 126, 123, 239, 68, 81, 246, 204, 242, 98, 126, 15, 245, 103, 106, 78, 85, 180, 51, 11, 47, 197, 147, 118, 13, 23, 172, 217, 76, 33, 152, 28, 240, 51, 125, 168, 112, 225, 203, 197, 6 },
                            RoleId = 1,
                            Surname = "Gökçeoğlu"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Etimesgut",
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2468),
                            Email = "erhangokceoglu91@gmail.com",
                            IsActive = true,
                            Name = "Erhan",
                            Password = "Ankara1.",
                            PasswordHash = new byte[] { 99, 255, 4, 210, 25, 222, 108, 4, 173, 164, 25, 211, 254, 167, 98, 242, 179, 20, 183, 96, 185, 249, 125, 78, 146, 52, 118, 91, 196, 151, 68, 82 },
                            PasswordSalt = new byte[] { 95, 175, 103, 226, 203, 120, 241, 223, 48, 244, 221, 33, 245, 42, 28, 123, 243, 139, 105, 209, 48, 242, 244, 158, 13, 144, 163, 164, 158, 3, 38, 83, 147, 74, 161, 94, 57, 41, 77, 220, 57, 177, 64, 239, 224, 214, 221, 42, 88, 165, 158, 237, 169, 147, 16, 120, 197, 237, 3, 140, 86, 236, 99, 46 },
                            RoleId = 2,
                            Surname = "Gökçeoğlu"
                        });
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2305),
                            IsActive = true,
                            Name = "Çankaya",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2308),
                            IsActive = true,
                            Name = "Keçiören",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2311),
                            IsActive = true,
                            Name = "Yenimahalle",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2313),
                            IsActive = true,
                            Name = "Levent",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2314),
                            IsActive = true,
                            Name = "Kadıköy",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2316),
                            IsActive = true,
                            Name = "Beşiktaş",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2317),
                            IsActive = true,
                            Name = "Bornova",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2319),
                            IsActive = true,
                            Name = "Karşıyaka",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2321),
                            IsActive = true,
                            Name = "Konak",
                            ProvinceId = 3
                        });
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProcessType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("State")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserIp")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Neighbourhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Neighbourhoods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2344),
                            DistrictId = 1,
                            IsActive = true,
                            Name = "Dikmen"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2346),
                            DistrictId = 1,
                            IsActive = true,
                            Name = "Bahçelievler"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2348),
                            DistrictId = 1,
                            IsActive = true,
                            Name = "Kızılay"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2350),
                            DistrictId = 2,
                            IsActive = true,
                            Name = "Etlik"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2351),
                            DistrictId = 2,
                            IsActive = true,
                            Name = "Karşıyaka"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2353),
                            DistrictId = 2,
                            IsActive = true,
                            Name = "Güzelkent"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2355),
                            DistrictId = 3,
                            IsActive = true,
                            Name = "Batıkent"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2357),
                            DistrictId = 3,
                            IsActive = true,
                            Name = "Demetevler"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2358),
                            DistrictId = 3,
                            IsActive = true,
                            Name = "Ümitköy"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2360),
                            DistrictId = 4,
                            IsActive = true,
                            Name = "Levent Mahallesi"
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2362),
                            DistrictId = 4,
                            IsActive = true,
                            Name = "Levent 1. Bölge"
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2364),
                            DistrictId = 4,
                            IsActive = true,
                            Name = "Levent 2. Bölge"
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2365),
                            DistrictId = 5,
                            IsActive = true,
                            Name = "Caddebostan"
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2367),
                            DistrictId = 5,
                            IsActive = true,
                            Name = "Fenerbahçe"
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2369),
                            DistrictId = 5,
                            IsActive = true,
                            Name = "Göztepe"
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2371),
                            DistrictId = 6,
                            IsActive = true,
                            Name = "Abbasağa"
                        },
                        new
                        {
                            Id = 17,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2372),
                            DistrictId = 6,
                            IsActive = true,
                            Name = "Akaretler"
                        },
                        new
                        {
                            Id = 18,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2374),
                            DistrictId = 6,
                            IsActive = true,
                            Name = "Arnavutköy"
                        },
                        new
                        {
                            Id = 19,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2377),
                            DistrictId = 7,
                            IsActive = true,
                            Name = "Kazımdirik"
                        },
                        new
                        {
                            Id = 20,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2378),
                            DistrictId = 7,
                            IsActive = true,
                            Name = "Çamdibi"
                        },
                        new
                        {
                            Id = 21,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2380),
                            DistrictId = 7,
                            IsActive = true,
                            Name = "Gülbahçe"
                        },
                        new
                        {
                            Id = 22,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2437),
                            DistrictId = 8,
                            IsActive = true,
                            Name = "Bahçelievler"
                        },
                        new
                        {
                            Id = 23,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2439),
                            DistrictId = 8,
                            IsActive = true,
                            Name = "Bostanlı"
                        },
                        new
                        {
                            Id = 24,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2441),
                            DistrictId = 8,
                            IsActive = true,
                            Name = "Çiğli"
                        },
                        new
                        {
                            Id = 25,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2442),
                            DistrictId = 9,
                            IsActive = true,
                            Name = "Alsancak"
                        },
                        new
                        {
                            Id = 26,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2444),
                            DistrictId = 9,
                            IsActive = true,
                            Name = "Bahribaba"
                        },
                        new
                        {
                            Id = 27,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2446),
                            DistrictId = 9,
                            IsActive = true,
                            Name = "Basmane"
                        });
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2280),
                            IsActive = true,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2283),
                            IsActive = true,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2285),
                            IsActive = true,
                            Name = "İzmir"
                        });
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.RealState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IslandNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NeighbourhoodId")
                        .HasColumnType("integer");

                    b.Property<string>("ParcelNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<int>("Qualification")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NeighbourhoodId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("RealStates");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2107),
                            IsActive = true,
                            Name = "SistemYoneticisi"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 5, 12, 9, 59, 15, 840, DateTimeKind.Local).AddTicks(2122),
                            IsActive = true,
                            Name = "Kullanici"
                        });
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccesToken")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("RealStateManagementSystem.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.District", b =>
                {
                    b.HasOne("RealStateManagementSystem.Domain.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Log", b =>
                {
                    b.HasOne("RealStateManagementSystem.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Logs")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Neighbourhood", b =>
                {
                    b.HasOne("RealStateManagementSystem.Domain.Entities.District", "District")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.RealState", b =>
                {
                    b.HasOne("RealStateManagementSystem.Domain.Entities.AppUser", "AppUser")
                        .WithMany("RealStates")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStateManagementSystem.Domain.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStateManagementSystem.Domain.Entities.Neighbourhood", "Neighbourhood")
                        .WithMany("RealStates")
                        .HasForeignKey("NeighbourhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStateManagementSystem.Domain.Entities.Province", "Province")
                        .WithMany("RealStates")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("District");

                    b.Navigation("Neighbourhood");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("RealStates");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.District", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Neighbourhood", b =>
                {
                    b.Navigation("RealStates");
                });

            modelBuilder.Entity("RealStateManagementSystem.Domain.Entities.Province", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("RealStates");
                });
#pragma warning restore 612, 618
        }
    }
}
